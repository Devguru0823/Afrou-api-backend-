#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config();
var app = require('../app');
var debug = require('debug')('afrou-api:server');
var http = require('http');
const { ExpressPeerServer } = require('peer');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');

// console.log('Express app: ', app);
app.set('port', port);
app.use((req, res, next) => {
	console.log("setting access -controll - origin")
	res.header('Access-Control-Allow-Origin', '*');
	next();
});
console.log('I m Running on ', port);
/**
 * Create HTTP server.
 */

const server = http.createServer(app);

// Set up peer server
const peerServer = ExpressPeerServer(server, {
	path: '/call',
	debug: true,
});

peerServer.on('connection', (client) => {
	console.log('PEER JS CLIENT ID:', client.getId());
});

/**
 * Listen on provided port, on all network interfaces.
 */

// intitialize io
// TODO: Delete log later

const { io } = require('../routes/socket');

io.attach(server, {
	allowEIO3: true,
	cors: {
		origin: '*',
		methods: ['GET', 'POST'],
		allowedHeaders: ['my-custom-header'],
		credentials: true,
	},
	maxHttpBufferSize: 1e8,
	pingTimeout: 60000,
});
// transports: ['websocket'],

server.listen(port);
console.log(port);
server.timeout = 900000;
server.on('error', onError);
server.on('listening', onListening);
app.isMainCluster = parseInt(process.env.NODE_APP_INSTANCE) === 0;
// console.log("=== I am here ===");
console.log(parseInt(process.env.NODE_APP_INSTANCE));
// if (app.isMainCluster) {
// console.log("== I am in ==");

let utility = require('../utilities');



// }
// console.log("== I am out ==");

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
}

app.get('/*', function (req, res, next) {
	res.status(404);
	res.json({ error: 'Can not find a route' });
});
